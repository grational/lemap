/*
 * This build file was auto generated by 'gigawatt'
 * @author d7392
 * @date 09-02-2018 10.06
 */

// [plugins] this block must be the first
plugins {
	// support for groovy
	id 'groovy'
	// autogenerate eclipse project files
	id 'eclipse'
	// create an html index linking every report generated
	id 'build-dashboard'
	// view of the project (jars used, navigable source tree)
	id 'project-report'
	// groovy code linter
	id 'codenarc'
	// test code coverage plugin
	id 'net.saliman.cobertura' version '2.5.0'
}

// [general] configuration
project.ext {
	groovyVersion       = '2.4.13'
	gradleVersion       = '4.5.1'
	spockVersion        = '1.1-groovy-2.4'
	codenarcVersion     = '0.27.0'
	slf4jVersion        = '1.7.25'
	commonsTextVersion  = '1.2'

}

project.with {
	//project.name is set in the settings.gradle with rootProject.name
	group                 "it.grational.lemap"
	version               "0.1.0" // (remove -SNAPSHOT for releases)
	description           "A collection of maps with peculiars matching functions"
	wrapper.gradleVersion "$gradleVersion"
}
// [crosscompile] source and target java version
allprojects {
	sourceCompatibility = '1.8'
	targetCompatibility = sourceCompatibility
}

repositories {
	jcenter()
}

dependencies {
	compile (
		// Groovy language support
		"org.codehaus.groovy:groovy-all:$groovyVersion",
		// Slf4j dependencies
		"org.slf4j:slf4j-api:$slf4jVersion",
		// for a revised implementation of the Levenshtein strings' distance
		"org.apache.commons:commons-text:$commonsTextVersion"
	)

	// We use the awesome Spock testing and specification framework
	testCompile "org.spockframework:spock-core:$spockVersion"
}

// codenarc groovy source analyses
codenarc{
	toolVersion = "$codenarcVersion"

	codenarcMain {
		configFile = rootProject.file('config/codenarc/ruleset.groovy')
		exclude "**/package-info.*"
		ignoreFailures true       // does not block builds
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
	codenarcTest {
		configFile = rootProject.file('config/codenarc/ruleset-test.groovy')
		ignoreFailures true
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
}



// [tasks] configuration //
jar {
	// execute check task when create the jar
	dependsOn 'check'
}

check {
	// create the code coverage report
	dependsOn 'cobertura'
}

// [tasks] definition
task listJars {
	description = 'print out the jars used by the project'
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
}

tasks.withType(Test) {
	maxParallelForks = Runtime.runtime.availableProcessors() / 2
}
task unitTest(type: Test) {
	exclude '**/*ISpec*'
	exclude '**/*FSpec*'
}
// vim: ft=groovy:fdm=indent
